'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On
Namespace Models.OrderManagement


    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
        Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
        Global.System.ComponentModel.ToolboxItem(true),  _
        Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
        Global.System.Xml.Serialization.XmlRootAttribute("DsExport"),  _
        Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class DsExport
        Inherits Global.System.Data.DataSet
    
        Private tableBrands As BrandsDataTable
    
        Private tableCustomers As CustomersDataTable
    
        Private tableInventory As InventoryDataTable
    
        Private tableOrderDetails As OrderDetailsDataTable
    
        Private tableOrders As OrdersDataTable
    
        Private tableProducts As ProductsDataTable
    
        Private tableSpecies As SpeciesDataTable
    
        Private tableOrderDetailsExport As OrderDetailsExportDataTable
    
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Brands")) Is Nothing) Then
                    MyBase.Tables.Add(New BrandsDataTable(ds.Tables("Brands")))
                End If
                If (Not (ds.Tables("Customers")) Is Nothing) Then
                    MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                If (Not (ds.Tables("Inventory")) Is Nothing) Then
                    MyBase.Tables.Add(New InventoryDataTable(ds.Tables("Inventory")))
                End If
                If (Not (ds.Tables("OrderDetails")) Is Nothing) Then
                    MyBase.Tables.Add(New OrderDetailsDataTable(ds.Tables("OrderDetails")))
                End If
                If (Not (ds.Tables("Orders")) Is Nothing) Then
                    MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
                End If
                If (Not (ds.Tables("Products")) Is Nothing) Then
                    MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
                End If
                If (Not (ds.Tables("Species")) Is Nothing) Then
                    MyBase.Tables.Add(New SpeciesDataTable(ds.Tables("Species")))
                End If
                If (Not (ds.Tables("OrderDetailsExport")) Is Nothing) Then
                    MyBase.Tables.Add(New OrderDetailsExportDataTable(ds.Tables("OrderDetailsExport")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Brands() As BrandsDataTable
            Get
                Return Me.tableBrands
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Customers() As CustomersDataTable
            Get
                Return Me.tableCustomers
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Inventory() As InventoryDataTable
            Get
                Return Me.tableInventory
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property OrderDetails() As OrderDetailsDataTable
            Get
                Return Me.tableOrderDetails
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Orders() As OrdersDataTable
            Get
                Return Me.tableOrders
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Products() As ProductsDataTable
            Get
                Return Me.tableProducts
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Species() As SpeciesDataTable
            Get
                Return Me.tableSpecies
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property OrderDetailsExport() As OrderDetailsExportDataTable
            Get
                Return Me.tableOrderDetailsExport
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.BrowsableAttribute(true),  _
            Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
            Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As DsExport = CType(MyBase.Clone,DsExport)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("Brands")) Is Nothing) Then
                    MyBase.Tables.Add(New BrandsDataTable(ds.Tables("Brands")))
                End If
                If (Not (ds.Tables("Customers")) Is Nothing) Then
                    MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                If (Not (ds.Tables("Inventory")) Is Nothing) Then
                    MyBase.Tables.Add(New InventoryDataTable(ds.Tables("Inventory")))
                End If
                If (Not (ds.Tables("OrderDetails")) Is Nothing) Then
                    MyBase.Tables.Add(New OrderDetailsDataTable(ds.Tables("OrderDetails")))
                End If
                If (Not (ds.Tables("Orders")) Is Nothing) Then
                    MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
                End If
                If (Not (ds.Tables("Products")) Is Nothing) Then
                    MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
                End If
                If (Not (ds.Tables("Species")) Is Nothing) Then
                    MyBase.Tables.Add(New SpeciesDataTable(ds.Tables("Species")))
                End If
                If (Not (ds.Tables("OrderDetailsExport")) Is Nothing) Then
                    MyBase.Tables.Add(New OrderDetailsExportDataTable(ds.Tables("OrderDetailsExport")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableBrands = CType(MyBase.Tables("Brands"),BrandsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableBrands) Is Nothing) Then
                    Me.tableBrands.InitVars
                End If
            End If
            Me.tableCustomers = CType(MyBase.Tables("Customers"),CustomersDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCustomers) Is Nothing) Then
                    Me.tableCustomers.InitVars
                End If
            End If
            Me.tableInventory = CType(MyBase.Tables("Inventory"),InventoryDataTable)
            If (initTable = true) Then
                If (Not (Me.tableInventory) Is Nothing) Then
                    Me.tableInventory.InitVars
                End If
            End If
            Me.tableOrderDetails = CType(MyBase.Tables("OrderDetails"),OrderDetailsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableOrderDetails) Is Nothing) Then
                    Me.tableOrderDetails.InitVars
                End If
            End If
            Me.tableOrders = CType(MyBase.Tables("Orders"),OrdersDataTable)
            If (initTable = true) Then
                If (Not (Me.tableOrders) Is Nothing) Then
                    Me.tableOrders.InitVars
                End If
            End If
            Me.tableProducts = CType(MyBase.Tables("Products"),ProductsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableProducts) Is Nothing) Then
                    Me.tableProducts.InitVars
                End If
            End If
            Me.tableSpecies = CType(MyBase.Tables("Species"),SpeciesDataTable)
            If (initTable = true) Then
                If (Not (Me.tableSpecies) Is Nothing) Then
                    Me.tableSpecies.InitVars
                End If
            End If
            Me.tableOrderDetailsExport = CType(MyBase.Tables("OrderDetailsExport"),OrderDetailsExportDataTable)
            If (initTable = true) Then
                If (Not (Me.tableOrderDetailsExport) Is Nothing) Then
                    Me.tableOrderDetailsExport.InitVars
                End If
            End If
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "DsExport"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/DsExport.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableBrands = New BrandsDataTable()
            MyBase.Tables.Add(Me.tableBrands)
            Me.tableCustomers = New CustomersDataTable()
            MyBase.Tables.Add(Me.tableCustomers)
            Me.tableInventory = New InventoryDataTable()
            MyBase.Tables.Add(Me.tableInventory)
            Me.tableOrderDetails = New OrderDetailsDataTable()
            MyBase.Tables.Add(Me.tableOrderDetails)
            Me.tableOrders = New OrdersDataTable()
            MyBase.Tables.Add(Me.tableOrders)
            Me.tableProducts = New ProductsDataTable()
            MyBase.Tables.Add(Me.tableProducts)
            Me.tableSpecies = New SpeciesDataTable()
            MyBase.Tables.Add(Me.tableSpecies)
            Me.tableOrderDetailsExport = New OrderDetailsExportDataTable()
            MyBase.Tables.Add(Me.tableOrderDetailsExport)
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeBrands() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCustomers() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeInventory() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeOrderDetails() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeOrders() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeProducts() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeSpecies() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeOrderDetailsExport() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As DsExport = New DsExport()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                        
                            Do While ((s1.Position <> s1.Length)  _
                                      AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub BrandsRowChangeEventHandler(ByVal sender As Object, ByVal e As BrandsRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub InventoryRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub OrderDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderDetailsRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub ProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductsRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub SpeciesRowChangeEventHandler(ByVal sender As Object, ByVal e As SpeciesRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub OrderDetailsExportRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderDetailsExportRowChangeEvent)
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class BrandsDataTable
            Inherits Global.System.Data.TypedTableBase(Of BrandsRow)
        
            Private columnBrandId As Global.System.Data.DataColumn
        
            Private columnBrandName As Global.System.Data.DataColumn
        
            Private columnBrandNameJp As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Brands"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BrandIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBrandId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BrandNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBrandName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BrandNameJpColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBrandNameJp
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As BrandsRow
                Get
                    Return CType(Me.Rows(index),BrandsRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BrandsRowChanging As BrandsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BrandsRowChanged As BrandsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BrandsRowDeleting As BrandsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BrandsRowDeleted As BrandsRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddBrandsRow(ByVal row As BrandsRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddBrandsRow(ByVal BrandName As String, ByVal BrandNameJp As String) As BrandsRow
                Dim rowBrandsRow As BrandsRow = CType(Me.NewRow,BrandsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, BrandName, BrandNameJp}
                rowBrandsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowBrandsRow)
                Return rowBrandsRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByBrandId(ByVal BrandId As Integer) As BrandsRow
                Return CType(Me.Rows.Find(New Object() {BrandId}),BrandsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As BrandsDataTable = CType(MyBase.Clone,BrandsDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New BrandsDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnBrandId = MyBase.Columns("BrandId")
                Me.columnBrandName = MyBase.Columns("BrandName")
                Me.columnBrandNameJp = MyBase.Columns("BrandNameJp")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnBrandId = New Global.System.Data.DataColumn("BrandId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBrandId)
                Me.columnBrandName = New Global.System.Data.DataColumn("BrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBrandName)
                Me.columnBrandNameJp = New Global.System.Data.DataColumn("BrandNameJp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBrandNameJp)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBrandId}, true))
                Me.columnBrandId.AutoIncrement = true
                Me.columnBrandId.AutoIncrementSeed = -1
                Me.columnBrandId.AutoIncrementStep = -1
                Me.columnBrandId.AllowDBNull = false
                Me.columnBrandId.ReadOnly = true
                Me.columnBrandId.Unique = true
                Me.columnBrandName.MaxLength = 50
                Me.columnBrandNameJp.MaxLength = 50
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewBrandsRow() As BrandsRow
                Return CType(Me.NewRow,BrandsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New BrandsRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(BrandsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.BrandsRowChangedEvent) Is Nothing) Then
                    RaiseEvent BrandsRowChanged(Me, New BrandsRowChangeEvent(CType(e.Row,BrandsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.BrandsRowChangingEvent) Is Nothing) Then
                    RaiseEvent BrandsRowChanging(Me, New BrandsRowChangeEvent(CType(e.Row,BrandsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.BrandsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent BrandsRowDeleted(Me, New BrandsRowChangeEvent(CType(e.Row,BrandsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.BrandsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent BrandsRowDeleting(Me, New BrandsRowChangeEvent(CType(e.Row,BrandsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveBrandsRow(ByVal row As BrandsRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "BrandsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CustomersDataTable
            Inherits Global.System.Data.TypedTableBase(Of CustomersRow)
        
            Private columnCustomerId As Global.System.Data.DataColumn
        
            Private columnName As Global.System.Data.DataColumn
        
            Private columnWechatName As Global.System.Data.DataColumn
        
            Private columnTaobaoName As Global.System.Data.DataColumn
        
            Private columnAddress As Global.System.Data.DataColumn
        
            Private columnPostCode As Global.System.Data.DataColumn
        
            Private columnPhone As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Customers"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CustomerIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCustomerId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WechatNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWechatName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property TaobaoNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTaobaoName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAddress
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PostCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPostCode
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPhone
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CustomersRow
                Get
                    Return CType(Me.Rows(index),CustomersRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CustomersRowChanging As CustomersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CustomersRowChanged As CustomersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CustomersRowDeleting As CustomersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CustomersRowDeleted As CustomersRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCustomersRow(ByVal Name As String, ByVal WechatName As String, ByVal TaobaoName As String, ByVal Address As String, ByVal PostCode As String, ByVal Phone As String) As CustomersRow
                Dim rowCustomersRow As CustomersRow = CType(Me.NewRow,CustomersRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Name, WechatName, TaobaoName, Address, PostCode, Phone}
                rowCustomersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCustomersRow)
                Return rowCustomersRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCustomerId(ByVal CustomerId As Integer) As CustomersRow
                Return CType(Me.Rows.Find(New Object() {CustomerId}),CustomersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CustomersDataTable = CType(MyBase.Clone,CustomersDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CustomersDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCustomerId = MyBase.Columns("CustomerId")
                Me.columnName = MyBase.Columns("Name")
                Me.columnWechatName = MyBase.Columns("WechatName")
                Me.columnTaobaoName = MyBase.Columns("TaobaoName")
                Me.columnAddress = MyBase.Columns("Address")
                Me.columnPostCode = MyBase.Columns("PostCode")
                Me.columnPhone = MyBase.Columns("Phone")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCustomerId = New Global.System.Data.DataColumn("CustomerId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCustomerId)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnWechatName = New Global.System.Data.DataColumn("WechatName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWechatName)
                Me.columnTaobaoName = New Global.System.Data.DataColumn("TaobaoName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTaobaoName)
                Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAddress)
                Me.columnPostCode = New Global.System.Data.DataColumn("PostCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPostCode)
                Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPhone)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustomerId}, true))
                Me.columnCustomerId.AutoIncrement = true
                Me.columnCustomerId.AutoIncrementSeed = -1
                Me.columnCustomerId.AutoIncrementStep = -1
                Me.columnCustomerId.AllowDBNull = false
                Me.columnCustomerId.ReadOnly = true
                Me.columnCustomerId.Unique = true
                Me.columnName.MaxLength = 50
                Me.columnWechatName.MaxLength = 50
                Me.columnTaobaoName.MaxLength = 50
                Me.columnAddress.MaxLength = 2147483647
                Me.columnPostCode.MaxLength = 20
                Me.columnPhone.MaxLength = 20
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCustomersRow() As CustomersRow
                Return CType(Me.NewRow,CustomersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CustomersRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CustomersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CustomersRowChangedEvent) Is Nothing) Then
                    RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CustomersRowChangingEvent) Is Nothing) Then
                    RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CustomersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CustomersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CustomersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class InventoryDataTable
            Inherits Global.System.Data.TypedTableBase(Of InventoryRow)
        
            Private columnProductId As Global.System.Data.DataColumn
        
            Private columnQuantity As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Inventory"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ProductIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnQuantity
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryRow
                Get
                    Return CType(Me.Rows(index),InventoryRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event InventoryRowChanging As InventoryRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event InventoryRowChanged As InventoryRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event InventoryRowDeleting As InventoryRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event InventoryRowDeleted As InventoryRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddInventoryRow(ByVal row As InventoryRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddInventoryRow(ByVal ProductId As Integer, ByVal Quantity As Integer) As InventoryRow
                Dim rowInventoryRow As InventoryRow = CType(Me.NewRow,InventoryRow)
                Dim columnValuesArray() As Object = New Object() {ProductId, Quantity}
                rowInventoryRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowInventoryRow)
                Return rowInventoryRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByProductId(ByVal ProductId As Integer) As InventoryRow
                Return CType(Me.Rows.Find(New Object() {ProductId}),InventoryRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As InventoryDataTable = CType(MyBase.Clone,InventoryDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New InventoryDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnProductId = MyBase.Columns("ProductId")
                Me.columnQuantity = MyBase.Columns("Quantity")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnProductId = New Global.System.Data.DataColumn("ProductId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductId)
                Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnQuantity)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProductId}, true))
                Me.columnProductId.AllowDBNull = false
                Me.columnProductId.Unique = true
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewInventoryRow() As InventoryRow
                Return CType(Me.NewRow,InventoryRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New InventoryRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(InventoryRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.InventoryRowChangedEvent) Is Nothing) Then
                    RaiseEvent InventoryRowChanged(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.InventoryRowChangingEvent) Is Nothing) Then
                    RaiseEvent InventoryRowChanging(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.InventoryRowDeletedEvent) Is Nothing) Then
                    RaiseEvent InventoryRowDeleted(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.InventoryRowDeletingEvent) Is Nothing) Then
                    RaiseEvent InventoryRowDeleting(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveInventoryRow(ByVal row As InventoryRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "InventoryDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class OrderDetailsDataTable
            Inherits Global.System.Data.TypedTableBase(Of OrderDetailsRow)
        
            Private columnOrderDetailId As Global.System.Data.DataColumn
        
            Private columnOrderId As Global.System.Data.DataColumn
        
            Private columnProductId As Global.System.Data.DataColumn
        
            Private columnQuantity As Global.System.Data.DataColumn
        
            Private columnPurchasePrice As Global.System.Data.DataColumn
        
            Private columnSoldPrice As Global.System.Data.DataColumn
        
            Private columnStatus As Global.System.Data.DataColumn
        
            Private columnLink As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "OrderDetails"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OrderDetailIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderDetailId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OrderIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ProductIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnQuantity
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PurchasePriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPurchasePrice
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SoldPriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSoldPrice
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LinkColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLink
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As OrderDetailsRow
                Get
                    Return CType(Me.Rows(index),OrderDetailsRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsRowChanging As OrderDetailsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsRowChanged As OrderDetailsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsRowDeleting As OrderDetailsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsRowDeleted As OrderDetailsRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddOrderDetailsRow(ByVal row As OrderDetailsRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddOrderDetailsRow(ByVal OrderId As Integer, ByVal ProductId As Integer, ByVal Quantity As Integer, ByVal PurchasePrice As Decimal, ByVal SoldPrice As Decimal, ByVal Status As Integer, ByVal Link As String) As OrderDetailsRow
                Dim rowOrderDetailsRow As OrderDetailsRow = CType(Me.NewRow,OrderDetailsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, OrderId, ProductId, Quantity, PurchasePrice, SoldPrice, Status, Link}
                rowOrderDetailsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowOrderDetailsRow)
                Return rowOrderDetailsRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByOrderDetailId(ByVal OrderDetailId As Integer) As OrderDetailsRow
                Return CType(Me.Rows.Find(New Object() {OrderDetailId}),OrderDetailsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As OrderDetailsDataTable = CType(MyBase.Clone,OrderDetailsDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New OrderDetailsDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnOrderDetailId = MyBase.Columns("OrderDetailId")
                Me.columnOrderId = MyBase.Columns("OrderId")
                Me.columnProductId = MyBase.Columns("ProductId")
                Me.columnQuantity = MyBase.Columns("Quantity")
                Me.columnPurchasePrice = MyBase.Columns("PurchasePrice")
                Me.columnSoldPrice = MyBase.Columns("SoldPrice")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnLink = MyBase.Columns("Link")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnOrderDetailId = New Global.System.Data.DataColumn("OrderDetailId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOrderDetailId)
                Me.columnOrderId = New Global.System.Data.DataColumn("OrderId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOrderId)
                Me.columnProductId = New Global.System.Data.DataColumn("ProductId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductId)
                Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnQuantity)
                Me.columnPurchasePrice = New Global.System.Data.DataColumn("PurchasePrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPurchasePrice)
                Me.columnSoldPrice = New Global.System.Data.DataColumn("SoldPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSoldPrice)
                Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnLink = New Global.System.Data.DataColumn("Link", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLink)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOrderDetailId}, true))
                Me.columnOrderDetailId.AutoIncrement = true
                Me.columnOrderDetailId.AutoIncrementSeed = -1
                Me.columnOrderDetailId.AutoIncrementStep = -1
                Me.columnOrderDetailId.AllowDBNull = false
                Me.columnOrderDetailId.ReadOnly = true
                Me.columnOrderDetailId.Unique = true
                Me.columnOrderId.AllowDBNull = false
                Me.columnProductId.AllowDBNull = false
                Me.columnQuantity.AllowDBNull = false
                Me.columnPurchasePrice.AllowDBNull = false
                Me.columnSoldPrice.AllowDBNull = false
                Me.columnStatus.AllowDBNull = false
                Me.columnLink.MaxLength = 2147483647
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewOrderDetailsRow() As OrderDetailsRow
                Return CType(Me.NewRow,OrderDetailsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New OrderDetailsRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(OrderDetailsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.OrderDetailsRowChangedEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowChanged(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.OrderDetailsRowChangingEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowChanging(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.OrderDetailsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowDeleted(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.OrderDetailsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowDeleting(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveOrderDetailsRow(ByVal row As OrderDetailsRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "OrderDetailsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class OrdersDataTable
            Inherits Global.System.Data.TypedTableBase(Of OrdersRow)
        
            Private columnOrderId As Global.System.Data.DataColumn
        
            Private columnCustomerId As Global.System.Data.DataColumn
        
            Private columnOrderType As Global.System.Data.DataColumn
        
            Private columnInvoiceNo As Global.System.Data.DataColumn
        
            Private columnOrderDate As Global.System.Data.DataColumn
        
            Private columnShipDate As Global.System.Data.DataColumn
        
            Private columnFreight As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Orders"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OrderIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CustomerIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCustomerId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OrderTypeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderType
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnInvoiceNo
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OrderDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderDate
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ShipDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnShipDate
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FreightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFreight
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As OrdersRow
                Get
                    Return CType(Me.Rows(index),OrdersRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrdersRowChanging As OrdersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrdersRowChanged As OrdersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrdersRowDeleting As OrdersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrdersRowDeleted As OrdersRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddOrdersRow(ByVal row As OrdersRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddOrdersRow(ByVal CustomerId As Integer, ByVal OrderType As Integer, ByVal InvoiceNo As String, ByVal OrderDate As Date, ByVal ShipDate As Date, ByVal Freight As Decimal) As OrdersRow
                Dim rowOrdersRow As OrdersRow = CType(Me.NewRow,OrdersRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, CustomerId, OrderType, InvoiceNo, OrderDate, ShipDate, Freight}
                rowOrdersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowOrdersRow)
                Return rowOrdersRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByOrderId(ByVal OrderId As Integer) As OrdersRow
                Return CType(Me.Rows.Find(New Object() {OrderId}),OrdersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As OrdersDataTable = CType(MyBase.Clone,OrdersDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New OrdersDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnOrderId = MyBase.Columns("OrderId")
                Me.columnCustomerId = MyBase.Columns("CustomerId")
                Me.columnOrderType = MyBase.Columns("OrderType")
                Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
                Me.columnOrderDate = MyBase.Columns("OrderDate")
                Me.columnShipDate = MyBase.Columns("ShipDate")
                Me.columnFreight = MyBase.Columns("Freight")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnOrderId = New Global.System.Data.DataColumn("OrderId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOrderId)
                Me.columnCustomerId = New Global.System.Data.DataColumn("CustomerId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCustomerId)
                Me.columnOrderType = New Global.System.Data.DataColumn("OrderType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOrderType)
                Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnInvoiceNo)
                Me.columnOrderDate = New Global.System.Data.DataColumn("OrderDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOrderDate)
                Me.columnShipDate = New Global.System.Data.DataColumn("ShipDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnShipDate)
                Me.columnFreight = New Global.System.Data.DataColumn("Freight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFreight)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOrderId}, true))
                Me.columnOrderId.AutoIncrement = true
                Me.columnOrderId.AutoIncrementSeed = -1
                Me.columnOrderId.AutoIncrementStep = -1
                Me.columnOrderId.AllowDBNull = false
                Me.columnOrderId.ReadOnly = true
                Me.columnOrderId.Unique = true
                Me.columnCustomerId.AllowDBNull = false
                Me.columnOrderType.AllowDBNull = false
                Me.columnInvoiceNo.MaxLength = 30
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewOrdersRow() As OrdersRow
                Return CType(Me.NewRow,OrdersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New OrdersRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(OrdersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.OrdersRowChangedEvent) Is Nothing) Then
                    RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.OrdersRowChangingEvent) Is Nothing) Then
                    RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.OrdersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.OrdersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "OrdersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ProductsDataTable
            Inherits Global.System.Data.TypedTableBase(Of ProductsRow)
        
            Private columnProductId As Global.System.Data.DataColumn
        
            Private columnSpeciesId As Global.System.Data.DataColumn
        
            Private columnBrandId As Global.System.Data.DataColumn
        
            Private columnProductName As Global.System.Data.DataColumn
        
            Private columnProductNameJp As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Products"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ProductIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SpeciesIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSpeciesId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BrandIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBrandId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ProductNameJpColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductNameJp
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ProductsRow
                Get
                    Return CType(Me.Rows(index),ProductsRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ProductsRowChanging As ProductsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ProductsRowChanged As ProductsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ProductsRowDeleting As ProductsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ProductsRowDeleted As ProductsRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddProductsRow(ByVal row As ProductsRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddProductsRow(ByVal SpeciesId As Integer, ByVal BrandId As Integer, ByVal ProductName As String, ByVal ProductNameJp As String) As ProductsRow
                Dim rowProductsRow As ProductsRow = CType(Me.NewRow,ProductsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, SpeciesId, BrandId, ProductName, ProductNameJp}
                rowProductsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowProductsRow)
                Return rowProductsRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByProductId(ByVal ProductId As Integer) As ProductsRow
                Return CType(Me.Rows.Find(New Object() {ProductId}),ProductsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ProductsDataTable = CType(MyBase.Clone,ProductsDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ProductsDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnProductId = MyBase.Columns("ProductId")
                Me.columnSpeciesId = MyBase.Columns("SpeciesId")
                Me.columnBrandId = MyBase.Columns("BrandId")
                Me.columnProductName = MyBase.Columns("ProductName")
                Me.columnProductNameJp = MyBase.Columns("ProductNameJp")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnProductId = New Global.System.Data.DataColumn("ProductId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductId)
                Me.columnSpeciesId = New Global.System.Data.DataColumn("SpeciesId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSpeciesId)
                Me.columnBrandId = New Global.System.Data.DataColumn("BrandId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBrandId)
                Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductName)
                Me.columnProductNameJp = New Global.System.Data.DataColumn("ProductNameJp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductNameJp)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProductId}, true))
                Me.columnProductId.AutoIncrement = true
                Me.columnProductId.AutoIncrementSeed = -1
                Me.columnProductId.AutoIncrementStep = -1
                Me.columnProductId.AllowDBNull = false
                Me.columnProductId.ReadOnly = true
                Me.columnProductId.Unique = true
                Me.columnSpeciesId.AllowDBNull = false
                Me.columnBrandId.AllowDBNull = false
                Me.columnProductName.MaxLength = 2147483647
                Me.columnProductNameJp.MaxLength = 2147483647
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewProductsRow() As ProductsRow
                Return CType(Me.NewRow,ProductsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ProductsRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ProductsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ProductsRowChangedEvent) Is Nothing) Then
                    RaiseEvent ProductsRowChanged(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ProductsRowChangingEvent) Is Nothing) Then
                    RaiseEvent ProductsRowChanging(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ProductsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ProductsRowDeleted(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ProductsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ProductsRowDeleting(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveProductsRow(ByVal row As ProductsRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ProductsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class SpeciesDataTable
            Inherits Global.System.Data.TypedTableBase(Of SpeciesRow)
        
            Private columnSpeciesId As Global.System.Data.DataColumn
        
            Private columnSpeciesName As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Species"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SpeciesIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSpeciesId
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SpeciesNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSpeciesName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As SpeciesRow
                Get
                    Return CType(Me.Rows(index),SpeciesRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SpeciesRowChanging As SpeciesRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SpeciesRowChanged As SpeciesRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SpeciesRowDeleting As SpeciesRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SpeciesRowDeleted As SpeciesRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddSpeciesRow(ByVal row As SpeciesRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddSpeciesRow(ByVal SpeciesName As String) As SpeciesRow
                Dim rowSpeciesRow As SpeciesRow = CType(Me.NewRow,SpeciesRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, SpeciesName}
                rowSpeciesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSpeciesRow)
                Return rowSpeciesRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindBySpeciesId(ByVal SpeciesId As Integer) As SpeciesRow
                Return CType(Me.Rows.Find(New Object() {SpeciesId}),SpeciesRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SpeciesDataTable = CType(MyBase.Clone,SpeciesDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SpeciesDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnSpeciesId = MyBase.Columns("SpeciesId")
                Me.columnSpeciesName = MyBase.Columns("SpeciesName")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnSpeciesId = New Global.System.Data.DataColumn("SpeciesId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSpeciesId)
                Me.columnSpeciesName = New Global.System.Data.DataColumn("SpeciesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSpeciesName)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSpeciesId}, true))
                Me.columnSpeciesId.AutoIncrement = true
                Me.columnSpeciesId.AutoIncrementSeed = -1
                Me.columnSpeciesId.AutoIncrementStep = -1
                Me.columnSpeciesId.AllowDBNull = false
                Me.columnSpeciesId.ReadOnly = true
                Me.columnSpeciesId.Unique = true
                Me.columnSpeciesName.MaxLength = 50
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewSpeciesRow() As SpeciesRow
                Return CType(Me.NewRow,SpeciesRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SpeciesRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SpeciesRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SpeciesRowChangedEvent) Is Nothing) Then
                    RaiseEvent SpeciesRowChanged(Me, New SpeciesRowChangeEvent(CType(e.Row,SpeciesRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SpeciesRowChangingEvent) Is Nothing) Then
                    RaiseEvent SpeciesRowChanging(Me, New SpeciesRowChangeEvent(CType(e.Row,SpeciesRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SpeciesRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SpeciesRowDeleted(Me, New SpeciesRowChangeEvent(CType(e.Row,SpeciesRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SpeciesRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SpeciesRowDeleting(Me, New SpeciesRowChangeEvent(CType(e.Row,SpeciesRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveSpeciesRow(ByVal row As SpeciesRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SpeciesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class OrderDetailsExportDataTable
            Inherits Global.System.Data.TypedTableBase(Of OrderDetailsExportRow)
        
            Private columnProductName As Global.System.Data.DataColumn
        
            Private columnQuantity As Global.System.Data.DataColumn
        
            Private columnSoldPrice As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "OrderDetailsExport"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnQuantity
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SoldPriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSoldPrice
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As OrderDetailsExportRow
                Get
                    Return CType(Me.Rows(index),OrderDetailsExportRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsExportRowChanging As OrderDetailsExportRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsExportRowChanged As OrderDetailsExportRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsExportRowDeleting As OrderDetailsExportRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event OrderDetailsExportRowDeleted As OrderDetailsExportRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddOrderDetailsExportRow(ByVal row As OrderDetailsExportRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddOrderDetailsExportRow(ByVal ProductName As String, ByVal Quantity As String, ByVal SoldPrice As String) As OrderDetailsExportRow
                Dim rowOrderDetailsExportRow As OrderDetailsExportRow = CType(Me.NewRow,OrderDetailsExportRow)
                Dim columnValuesArray() As Object = New Object() {ProductName, Quantity, SoldPrice}
                rowOrderDetailsExportRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowOrderDetailsExportRow)
                Return rowOrderDetailsExportRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As OrderDetailsExportDataTable = CType(MyBase.Clone,OrderDetailsExportDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New OrderDetailsExportDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnProductName = MyBase.Columns("ProductName")
                Me.columnQuantity = MyBase.Columns("Quantity")
                Me.columnSoldPrice = MyBase.Columns("SoldPrice")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductName)
                Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnQuantity)
                Me.columnSoldPrice = New Global.System.Data.DataColumn("SoldPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSoldPrice)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewOrderDetailsExportRow() As OrderDetailsExportRow
                Return CType(Me.NewRow,OrderDetailsExportRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New OrderDetailsExportRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(OrderDetailsExportRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.OrderDetailsExportRowChangedEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsExportRowChanged(Me, New OrderDetailsExportRowChangeEvent(CType(e.Row,OrderDetailsExportRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.OrderDetailsExportRowChangingEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsExportRowChanging(Me, New OrderDetailsExportRowChangeEvent(CType(e.Row,OrderDetailsExportRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.OrderDetailsExportRowDeletedEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsExportRowDeleted(Me, New OrderDetailsExportRowChangeEvent(CType(e.Row,OrderDetailsExportRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.OrderDetailsExportRowDeletingEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsExportRowDeleting(Me, New OrderDetailsExportRowChangeEvent(CType(e.Row,OrderDetailsExportRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveOrderDetailsExportRow(ByVal row As OrderDetailsExportRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As DsExport = New DsExport()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "OrderDetailsExportDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                          AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class BrandsRow
            Inherits Global.System.Data.DataRow
        
            Private tableBrands As BrandsDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableBrands = CType(Me.Table,BrandsDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BrandId() As Integer
                Get
                    Return CType(Me(Me.tableBrands.BrandIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableBrands.BrandIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BrandName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBrands.BrandNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'BrandName' in table 'Brands' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBrands.BrandNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BrandNameJp() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBrands.BrandNameJpColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'BrandNameJp' in table 'Brands' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBrands.BrandNameJpColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsBrandNameNull() As Boolean
                Return Me.IsNull(Me.tableBrands.BrandNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetBrandNameNull()
                Me(Me.tableBrands.BrandNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsBrandNameJpNull() As Boolean
                Return Me.IsNull(Me.tableBrands.BrandNameJpColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetBrandNameJpNull()
                Me(Me.tableBrands.BrandNameJpColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CustomersRow
            Inherits Global.System.Data.DataRow
        
            Private tableCustomers As CustomersDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCustomers = CType(Me.Table,CustomersDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CustomerId() As Integer
                Get
                    Return CType(Me(Me.tableCustomers.CustomerIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableCustomers.CustomerIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Name() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.NameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.NameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property WechatName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.WechatNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'WechatName' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.WechatNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property TaobaoName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.TaobaoNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TaobaoName' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.TaobaoNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Address() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.AddressColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.AddressColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PostCode() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.PostCodeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PostCode' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.PostCodeColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Phone() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.PhoneColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.PhoneColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNameNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.NameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNameNull()
                Me(Me.tableCustomers.NameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWechatNameNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.WechatNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWechatNameNull()
                Me(Me.tableCustomers.WechatNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsTaobaoNameNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.TaobaoNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetTaobaoNameNull()
                Me(Me.tableCustomers.TaobaoNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsAddressNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.AddressColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetAddressNull()
                Me(Me.tableCustomers.AddressColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPostCodeNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.PostCodeColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPostCodeNull()
                Me(Me.tableCustomers.PostCodeColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.PhoneColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPhoneNull()
                Me(Me.tableCustomers.PhoneColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class InventoryRow
            Inherits Global.System.Data.DataRow
        
            Private tableInventory As InventoryDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableInventory = CType(Me.Table,InventoryDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ProductId() As Integer
                Get
                    Return CType(Me(Me.tableInventory.ProductIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableInventory.ProductIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Quantity() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableInventory.QuantityColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'Inventory' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableInventory.QuantityColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsQuantityNull() As Boolean
                Return Me.IsNull(Me.tableInventory.QuantityColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetQuantityNull()
                Me(Me.tableInventory.QuantityColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class OrderDetailsRow
            Inherits Global.System.Data.DataRow
        
            Private tableOrderDetails As OrderDetailsDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrderDetails = CType(Me.Table,OrderDetailsDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OrderDetailId() As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.OrderDetailIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.OrderDetailIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OrderId() As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.OrderIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.OrderIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ProductId() As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.ProductIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.ProductIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Quantity() As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.QuantityColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.QuantityColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PurchasePrice() As Decimal
                Get
                    Return CType(Me(Me.tableOrderDetails.PurchasePriceColumn),Decimal)
                End Get
                Set
                    Me(Me.tableOrderDetails.PurchasePriceColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SoldPrice() As Decimal
                Get
                    Return CType(Me(Me.tableOrderDetails.SoldPriceColumn),Decimal)
                End Get
                Set
                    Me(Me.tableOrderDetails.SoldPriceColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Status() As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.StatusColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.StatusColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Link() As String
                Get
                    Try 
                        Return CType(Me(Me.tableOrderDetails.LinkColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Link' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrderDetails.LinkColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLinkNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.LinkColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLinkNull()
                Me(Me.tableOrderDetails.LinkColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class OrdersRow
            Inherits Global.System.Data.DataRow
        
            Private tableOrders As OrdersDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrders = CType(Me.Table,OrdersDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OrderId() As Integer
                Get
                    Return CType(Me(Me.tableOrders.OrderIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrders.OrderIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CustomerId() As Integer
                Get
                    Return CType(Me(Me.tableOrders.CustomerIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrders.CustomerIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OrderType() As Integer
                Get
                    Return CType(Me(Me.tableOrders.OrderTypeColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrders.OrderTypeColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property InvoiceNo() As String
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.InvoiceNoColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNo' in table 'Orders' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.InvoiceNoColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OrderDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.OrderDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OrderDate' in table 'Orders' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.OrderDateColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ShipDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.ShipDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ShipDate' in table 'Orders' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.ShipDateColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Freight() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.FreightColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Freight' in table 'Orders' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.FreightColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsInvoiceNoNull() As Boolean
                Return Me.IsNull(Me.tableOrders.InvoiceNoColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetInvoiceNoNull()
                Me(Me.tableOrders.InvoiceNoColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOrderDateNull() As Boolean
                Return Me.IsNull(Me.tableOrders.OrderDateColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOrderDateNull()
                Me(Me.tableOrders.OrderDateColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsShipDateNull() As Boolean
                Return Me.IsNull(Me.tableOrders.ShipDateColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetShipDateNull()
                Me(Me.tableOrders.ShipDateColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFreightNull() As Boolean
                Return Me.IsNull(Me.tableOrders.FreightColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFreightNull()
                Me(Me.tableOrders.FreightColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ProductsRow
            Inherits Global.System.Data.DataRow
        
            Private tableProducts As ProductsDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableProducts = CType(Me.Table,ProductsDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ProductId() As Integer
                Get
                    Return CType(Me(Me.tableProducts.ProductIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableProducts.ProductIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SpeciesId() As Integer
                Get
                    Return CType(Me(Me.tableProducts.SpeciesIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableProducts.SpeciesIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BrandId() As Integer
                Get
                    Return CType(Me(Me.tableProducts.BrandIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableProducts.BrandIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ProductName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableProducts.ProductNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableProducts.ProductNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ProductNameJp() As String
                Get
                    Try 
                        Return CType(Me(Me.tableProducts.ProductNameJpColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ProductNameJp' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableProducts.ProductNameJpColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsProductNameNull() As Boolean
                Return Me.IsNull(Me.tableProducts.ProductNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetProductNameNull()
                Me(Me.tableProducts.ProductNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsProductNameJpNull() As Boolean
                Return Me.IsNull(Me.tableProducts.ProductNameJpColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetProductNameJpNull()
                Me(Me.tableProducts.ProductNameJpColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class SpeciesRow
            Inherits Global.System.Data.DataRow
        
            Private tableSpecies As SpeciesDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSpecies = CType(Me.Table,SpeciesDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SpeciesId() As Integer
                Get
                    Return CType(Me(Me.tableSpecies.SpeciesIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableSpecies.SpeciesIdColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SpeciesName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSpecies.SpeciesNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SpeciesName' in table 'Species' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSpecies.SpeciesNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSpeciesNameNull() As Boolean
                Return Me.IsNull(Me.tableSpecies.SpeciesNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSpeciesNameNull()
                Me(Me.tableSpecies.SpeciesNameColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class OrderDetailsExportRow
            Inherits Global.System.Data.DataRow
        
            Private tableOrderDetailsExport As OrderDetailsExportDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrderDetailsExport = CType(Me.Table,OrderDetailsExportDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ProductName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableOrderDetailsExport.ProductNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'OrderDetailsExport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrderDetailsExport.ProductNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Quantity() As String
                Get
                    Try 
                        Return CType(Me(Me.tableOrderDetailsExport.QuantityColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'OrderDetailsExport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrderDetailsExport.QuantityColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SoldPrice() As String
                Get
                    Try 
                        Return CType(Me(Me.tableOrderDetailsExport.SoldPriceColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SoldPrice' in table 'OrderDetailsExport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrderDetailsExport.SoldPriceColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsProductNameNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetailsExport.ProductNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetProductNameNull()
                Me(Me.tableOrderDetailsExport.ProductNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsQuantityNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetailsExport.QuantityColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetQuantityNull()
                Me(Me.tableOrderDetailsExport.QuantityColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSoldPriceNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetailsExport.SoldPriceColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSoldPriceNull()
                Me(Me.tableOrderDetailsExport.SoldPriceColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class BrandsRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As BrandsRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As BrandsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As BrandsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CustomersRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As CustomersRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CustomersRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CustomersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class InventoryRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As InventoryRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As InventoryRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As InventoryRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class OrderDetailsRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As OrderDetailsRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As OrderDetailsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As OrderDetailsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class OrdersRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As OrdersRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As OrdersRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As OrdersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class ProductsRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As ProductsRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As ProductsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As ProductsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class SpeciesRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As SpeciesRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As SpeciesRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As SpeciesRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class OrderDetailsExportRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As OrderDetailsExportRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As OrderDetailsExportRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As OrderDetailsExportRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End NameSpace